{"version":3,"sources":["Context.js","components/Form.js","components/UserList.js","App.js","Actions.js","reportWebVitals.js","index.js"],"names":["AppContext","React","createContext","Provider","Form","insertUser","useContext","useState","newUser","setNewUser","addNewUser","e","field","target","value","className","onSubmit","preventDefault","reset","htmlFor","type","id","onChange","placeholder","autoComplete","required","UserList","users","editMode","cancelEdit","updateUser","deleteUser","newData","setNewData","updateNewData","length","map","user_name","user_email","isEditing","defaultValue","onClick","enableEdit","window","confirm","deleteConfirm","App","data","setUsers","user","userData","Date","now","toString","Math","random","substr","theID","userDeleted","filter","Actions","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.627b83e7.chunk.js","sourcesContent":["import React from \"react\";\r\nexport const AppContext = React.createContext();\r\nexport const Provider = AppContext.Provider;","import { useState, useContext } from \"react\";\r\nimport { AppContext } from \"../Context\";\r\nconst Form = () => {\r\n  const { insertUser } = useContext(AppContext);\r\n  const [newUser, setNewUser] = useState({});\r\n\r\n  // Storing the Insert User Form Data.\r\n  const addNewUser = (e, field) => {\r\n    setNewUser({\r\n      ...newUser,\r\n      [field]: e.target.value,\r\n    });\r\n  };\r\n\r\n  // Inserting a new user into the Database.\r\n  const submitUser = (e) => {\r\n    e.preventDefault();\r\n    insertUser(newUser);\r\n    e.target.reset();\r\n  };\r\n\r\n  return (\r\n    <form className=\"insertForm\" onSubmit={submitUser}>\r\n      <h2>Insert User</h2>\r\n      <label htmlFor=\"_name\">Name</label>\r\n      <input\r\n        type=\"text\"\r\n        id=\"_name\"\r\n        onChange={(e) => addNewUser(e, \"user_name\")}\r\n        placeholder=\"Enter name\"\r\n        autoComplete=\"off\"\r\n        required\r\n      />\r\n      <label htmlFor=\"_email\">Email</label>\r\n      <input\r\n        type=\"email\"\r\n        id=\"_email\"\r\n        onChange={(e) => addNewUser(e, \"user_email\")}\r\n        placeholder=\"Enter email\"\r\n        autoComplete=\"off\"\r\n        required\r\n      />\r\n      <input type=\"submit\" value=\"Insert\" />\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default Form;","import { useContext, useState } from \"react\";\r\nimport { AppContext } from \"../Context\";\r\n\r\nconst UserList = () => {\r\n  const {\r\n    users,\r\n    editMode,\r\n    cancelEdit,\r\n    updateUser,\r\n    deleteUser,\r\n  } = useContext(AppContext);\r\n\r\n  // Storing users new data when they editing their info.\r\n  const [newData, setNewData] = useState({});\r\n\r\n  const saveBtn = () => {\r\n    updateUser(newData);\r\n  };\r\n\r\n  const updateNewData = (e, field) => {\r\n    setNewData({\r\n      ...newData,\r\n      [field]: e.target.value,\r\n    });\r\n  };\r\n\r\n  const enableEdit = (id, user_name, user_email) => {\r\n    setNewData({ id, user_name, user_email });\r\n    editMode(id);\r\n  };\r\n\r\n  const deleteConfirm = (id) => {\r\n    if (window.confirm(\"Are you sure?\")) {\r\n      deleteUser(id);\r\n    }\r\n  };\r\n\r\n  return !users.length ? (\r\n    <p>Please insert some users.</p>\r\n  ) : (\r\n    <table>\r\n      <thead>\r\n        <tr>\r\n          <th>Name</th>\r\n          <th>Email</th>\r\n          <th>Action</th>\r\n        </tr>\r\n      </thead>\r\n      <tbody>\r\n        {users.map(({ id, user_name, user_email, isEditing }) => {\r\n          return isEditing === true ? (\r\n            <tr key={id}>\r\n              <td>\r\n                <input\r\n                  type=\"text\"\r\n                  defaultValue={user_name}\r\n                  onChange={(e) => updateNewData(e, \"user_name\")}\r\n                />\r\n              </td>\r\n              <td>\r\n                <input\r\n                  type=\"email\"\r\n                  defaultValue={user_email}\r\n                  onChange={(e) => updateNewData(e, \"user_email\")}\r\n                />\r\n              </td>\r\n              <td>\r\n                <button className=\"btn green-btn\" onClick={() => saveBtn()}>\r\n                  Save\r\n                </button>\r\n                <button\r\n                  className=\"btn default-btn\"\r\n                  onClick={() => cancelEdit(id)}\r\n                >\r\n                  Cancel\r\n                </button>\r\n              </td>\r\n            </tr>\r\n          ) : (\r\n            <tr key={id}>\r\n              <td>{user_name}</td>\r\n              <td>{user_email}</td>\r\n              <td>\r\n                <button\r\n                  className=\"btn default-btn\"\r\n                  onClick={() => enableEdit(id, user_name, user_email)}\r\n                >\r\n                  Edit\r\n                </button>\r\n                <button\r\n                  className=\"btn red-btn\"\r\n                  onClick={() => deleteConfirm(id)}\r\n                >\r\n                  Delete\r\n                </button>\r\n              </td>\r\n            </tr>\r\n          );\r\n        })}\r\n      </tbody>\r\n    </table>\r\n  );\r\n};\r\n\r\nexport default UserList;","import { Provider } from \"./Context\";\nimport Form from \"./components/Form\";\nimport UserList from \"./components/UserList\";\nimport { Actions } from \"./Actions\";\nfunction App() {\n  const data = Actions();\n  return (\n    <Provider value={data}>\n      <div className=\"App\">\n        <h1>React JS + PHP CRUD Application</h1>\n        <div className=\"wrapper\">\n          <section className=\"left-side\">\n            <Form />\n          </section>\n          <section className=\"right-side\">\n            <UserList />\n          </section>\n        </div>\n      </div>\n    </Provider>\n  );\n}\n\nexport default App;","import { useState } from \"react\";\r\n\r\nexport const Actions = () => {\r\n  let [users, setUsers] = useState([]);\r\n\r\n\r\n  // Inserting a new user into the database.\r\n  const insertUser = (newUser) => {\r\n    setUsers([\r\n        {\r\n            id:Date.now().toString(36) + Math.random().toString(36).substr(2),\r\n          ...newUser,\r\n        },\r\n        ...users,\r\n      ]);\r\n  };\r\n\r\n  // Enabling the edit mode for a listed user.\r\n  const editMode = (id) => {\r\n    users = users.map((user) => {\r\n      if (user.id === id) {\r\n        user.isEditing = true;\r\n        return user;\r\n      }\r\n      user.isEditing = false;\r\n      return user;\r\n    });\r\n    setUsers(users);\r\n  };\r\n\r\n  // Cance the edit mode.\r\n  const cancelEdit = (id) => {\r\n    users = users.map((user) => {\r\n      if (user.id === id) {\r\n        user.isEditing = false;\r\n        return user;\r\n      }\r\n      return user;\r\n    });\r\n    setUsers(users);\r\n  };\r\n\r\n  // Updating a user.\r\n  const updateUser = (userData) => {\r\n    users = users.map((user) => {\r\n        if (user.id === userData.id) {\r\n          user.isEditing = false;\r\n          user.user_name = userData.user_name;\r\n          user.user_email = userData.user_email;\r\n          return user;\r\n        }\r\n        return user;\r\n      });\r\n    setUsers(users);\r\n  };\r\n\r\n  // Deleting a user.\r\n  const deleteUser = (theID) => {\r\n      // filter outing the user.\r\n    let userDeleted = users.filter((user) => {\r\n      return user.id !== theID;\r\n    });\r\n\r\n    setUsers(userDeleted);\r\n  };\r\n\r\n  return {\r\n    users,\r\n    editMode,\r\n    cancelEdit,\r\n    updateUser,\r\n    insertUser,\r\n    deleteUser,\r\n  };\r\n};","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}